namespace :nvm do
  task :validate do
    on release_roles(fetch(:nvm_roles)) do
      within release_path do
        if test 'node', '--version'
          puts "node #{fetch(:nvm_node)} is installed"
        else
          puts "node #{fetch(:nvm_node)} not installed"
          exit 1
        end
      end
    end
  end

  task :node_version do
    on release_roles(fetch(:nvm_roles)) do
      within release_path do
        execute :node, "--version"
      end
    end
  end

  task :npm_version do
    on release_roles(fetch(:nvm_roles)) do
      within release_path do
        execute :npm, "--version"
      end
    end
  end

  task :map_bins do
    SSHKit.config.default_env.merge!({
      nvm_dir: fetch(:nvm_path)
    })
    nvm_prefix = fetch(:nvm_prefix, -> { "#{fetch(:nvm_source_path)}/nvm-exec" } )
    fetch(:nvm_map_bins).each do |command|
      SSHKit.config.command_map.prefix[command.to_sym].unshift(nvm_prefix)
    end
  end
end

Capistrano::DSL.stages.each do |stage|
  before 'deploy:updated', 'nvm:map_bins'
  before 'deploy:updated', 'nvm:validate'
end

namespace :load do
  task :defaults do

    set :nvm_path, -> {
      nvm_path = fetch(:nvm_custom_path)
      nvm_path ||= if fetch(:nvm_type, :user) == :system
        "/usr/local/nvm"
      else
        "$HOME/.nvm"
      end
    }

    set :nvm_source_path, -> {
       fetch(:nvm_source_path, fetch(:nvm_path))
    }
    set :nvm_roles, fetch(:nvm_roles, :all)
    set :nvm_map_bins, %w{node npm}
  end
end
